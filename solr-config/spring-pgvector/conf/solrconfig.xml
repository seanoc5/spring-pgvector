<?xml version="1.0" encoding="UTF-8" ?>
<config>
    <luceneMatchVersion>9.11</luceneMatchVersion>
    <dataDir>${solr.data.dir:}</dataDir>
    <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

    <codecFactory class="solr.SchemaCodecFactory"/>
    <indexConfig>
        <lockType>${solr.lock.type:native}</lockType>
    </indexConfig>
    <updateHandler class="solr.DirectUpdateHandler2">
        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>
        <autoCommit>
            <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>
        <autoSoftCommit>
            <maxTime>${solr.autoSoftCommit.maxTime:3000}</maxTime>
        </autoSoftCommit>
    </updateHandler>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Query section - these settings control query time things like caches
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <!--        <maxBooleanClauses>${solr.max.booleanClauses:4096}</maxBooleanClauses>-->
        <minPrefixQueryTermLength>${solr.query.minPrefixLength:-1}</minPrefixQueryTermLength>
        <filterCache size="512" initialSize="512" autowarmCount="0"/>
        <queryResultCache size="512" initialSize="512" autowarmCount="0"/>
        <documentCache size="512" initialSize="512" autowarmCount="0"/>
        <!-- custom cache currently used by block join -->
        <cache name="perSegFilter" class="solr.CaffeineCache" size="10" initialSize="0" autowarmCount="10" regenerator="solr.NoOpRegenerator"/>
        <enableLazyFieldLoading>true</enableLazyFieldLoading>
        <queryResultWindowSize>20</queryResultWindowSize>
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">naics</str>
                    <str name="sort">code asc</str>
                </lst>
                <lst>
                    <str name="q">opportunities</str>
                    <str name="sort">type_s asc</str>
                </lst>
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">naics software opportunities firstSearcher contract setup</str>
                </lst>
            </arr>
        </listener>
        <useColdSearcher>false</useColdSearcher>

    </query>
    <requestDispatcher>
        <httpCaching never304="true"/>
    </requestDispatcher>
    <!-- Primary search handler, expected by most clients, examples and UI frameworks -->
    <requestHandler name="/select" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">all</str>
            <int name="rows">5</int>
            <str name="hl">true</str>
            <str name="hl.fl">*</str>
            <str name="q.alt">*:*</str>
            <str name="fl">id,title,description,score</str>
            <str name="facet">on</str>
            <str name="facet.field">type_s</str>
            <str name="facet.field">tags</str>
            <str name="defType">edismax</str>
            <str name="qf">title^5.0 title_txt_en^3 description^3 description_txt_en^2 bucket_tight^0.1 bucket_fuzzy^0.5</str>
            <str name="pf">title^5.0 title_txt_en^3 description^4 description_txt_en^2</str>
        </lst>
    </requestHandler>

    <!-- A request handler that returns indented JSON by default -->
    <requestHandler name="/query" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">all</str>
            <int name="rows">5</int>
            <str name="hl">true</str>
            <str name="hl.fl">*</str>
            <str name="q.alt">*:*</str>
            <str name="indent">true</str>
            <str name="facet">on</str>
            <str name="facet.field">tags</str>
            <str name="fl">id,title,description,score</str>
            <str name="defType">edismax</str>
            <str name="qf">title^5.0 title_txt_en^3 description^3 description_txt_en^2 bucket_tight^0.1 bucket_fuzzy^0.5</str>
            <str name="pf">title^5.0 title_txt_en^3 description^4 description_txt_en^2</str>
        </lst>
    </requestHandler>

    <requestHandler name="/naics" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">all</str>
            <int name="rows">5</int>
            <str name="hl">true</str>
            <str name="hl.fl">id,code,description,
                title,sector_title,subsector_title,industry_group_title, naics_industry_title,national_industry_title,
                sector_code,industry_group_code,naics_industry_code,national_industry_code
            </str>
            <str name="q.alt">*:*</str>
            <str name="fq">type_s:naics_code</str>
            <str name="indent">true</str>
            <str name="facet">on</str>
            <str name="facet.field">sector_code</str>
            <str name="facet.field">subsector_code</str>
            <str name="facet.field">naics_industry_code</str>
            <str name="facet.field">national_industry_code</str>

            <str name="facet.field">sector_title</str>
            <str name="facet.field">subsector_title</str>
            <str name="facet.field">naics_industry_title</str>
            <str name="facet.field">national_industry_title</str>
            <!--            <str name="facet.field"></str>-->
            <str name="fl">id,code,title,tags,code,description,sector_title,subsector_title,industry_group_title,naics_industry_title,score</str>
            <str name="defType">edismax</str>
            <str name="qf">title^5.0 title_txt_en^3 description^3 description_txt_en^2 bucket_tight^1 bucket_fuzzy^0.5</str>
            <str name="pf">title^5.0 title_txt_en^3 description^4 description_txt_en^2</str>
        </lst>
    </requestHandler>

    <requestHandler name="/opportunities" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">all</str>
            <str name="indent">true</str>
            <int name="rows">5</int>
            <str name="hl">true</str>
            <str name="hl.fl">id,</str>
            <str name="q.alt">*:*</str>
            <str name="fq">type_s:opportunity</str>
            <str name="facet">on</str>
            <str name="facet.field">psc_s</str>
            <str name="facet.field">set_aside_s</str>
            <str name="facet.field"></str>

            <!--            Notice ID	Title	Description	Current Response Date	Last Modified Date	Last Published Date	Contract Opportunity Type	POC Information	Active/Inactive	Awardee	Contract Award Number	Contract Award Date	NAICS	PSC	Modification Number	Set Aside-->
            <str name="fl">id,type_s,code, notice_id_s,title,description,psc_s,set_aside_s,current_response_date_dt,score</str>
            <str name="defType">edismax</str>
            <str name="qf">code^10 psc^7 title^5.0 title_txt_en^3 description^3 description_txt_en^2 bucket_tight^1 bucket_fuzzy^0.5</str>
            <str name="pf">title^5.0 title_txt_en^3 description^4 description_txt_en^2</str>
        </lst>
    </requestHandler>

    <!-- Shared parameters for multiple Request Handlers -->
    <initParams path="/update/**,/query,/select,/spell">
        <lst name="defaults">
            <str name="df">_text_</str>
        </lst>
    </initParams>

    <!-- Spell Check

         The spell check component can return a list of alternative spelling
         suggestions.

         https://solr.apache.org/guide/solr/latest/query-guide/spell-checking.html
      -->
    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

        <str name="queryAnalyzerFieldType">text_general</str>

        <!-- Multiple "Spell Checkers" can be declared and used by this
             component
          -->

        <!-- a spellchecker built from a field of the main index -->
        <lst name="spellchecker">
            <str name="name">default</str>
            <str name="field">_text_</str>
            <str name="classname">solr.DirectSolrSpellChecker</str>
            <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
            <str name="distanceMeasure">internal</str>
            <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
            <float name="accuracy">0.5</float>
            <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
            <int name="maxEdits">2</int>
            <!-- the minimum shared prefix when enumerating terms -->
            <int name="minPrefix">1</int>
            <!-- maximum number of inspections per result. -->
            <int name="maxInspections">5</int>
            <!-- minimum length of a query term to be considered for correction -->
            <int name="minQueryLength">4</int>
            <!-- maximum threshold of documents a query term can appear to be considered for correction -->
            <float name="maxQueryFrequency">0.01</float>
            <!-- uncomment this to require suggestions to occur in 1% of the documents
              <float name="thresholdTokenFrequency">.01</float>
            -->
        </lst>

        <!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
        <!--
        <lst name="spellchecker">
          <str name="name">wordbreak</str>
          <str name="classname">solr.WordBreakSolrSpellChecker</str>
          <str name="field">name</str>
          <str name="combineWords">true</str>
          <str name="breakWords">true</str>
          <int name="maxChanges">10</int>
        </lst>
        -->
    </searchComponent>

    <!-- A request handler for demonstrating the spellcheck component.

         NOTE: This is purely as an example.  The whole purpose of the
         SpellCheckComponent is to hook it into the request handler that
         handles your normal user queries so that a separate request is
         not needed to get suggestions.

         IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS
         NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!

         See https://solr.apache.org/guide/solr/latest/query-guide/spell-checking.html for details
         on the request parameters.
      -->
    <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <!-- Solr will use suggestions from both the 'default' spellchecker
                 and from the 'wordbreak' spellchecker and combine them.
                 collations (re-written queries) can include a combination of
                 corrections from both spellcheckers -->
            <str name="spellcheck.dictionary">default</str>
            <str name="spellcheck">on</str>
            <str name="spellcheck.extendedResults">true</str>
            <str name="spellcheck.count">10</str>
            <str name="spellcheck.alternativeTermCount">5</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">10</str>
            <str name="spellcheck.maxCollations">5</str>
        </lst>
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <!-- Highlighting Component

         https://solr.apache.org/guide/solr/latest/query-guide/highlighting.html
      -->
    <searchComponent class="solr.HighlightComponent" name="highlight">
        <!-- note: the hl.method=unified highlighter is not configured here; it's completely configured
        via parameters.  The below configuration supports hl.method=original and fastVector. -->
        <highlighting>
            <!-- Configure the standard fragmenter -->
            <!-- This could most likely be commented out in the "default" case -->
            <fragmenter name="gap"
                        default="true"
                        class="solr.highlight.GapFragmenter">
                <lst name="defaults">
                    <int name="hl.fragsize">100</int>
                </lst>
            </fragmenter>

            <!-- A regular-expression-based fragmenter
                 (for sentence extraction)
              -->
            <fragmenter name="regex"
                        class="solr.highlight.RegexFragmenter">
                <lst name="defaults">
                    <!-- slightly smaller fragsizes work better because of slop -->
                    <int name="hl.fragsize">70</int>
                    <!-- allow 50% slop on fragment sizes -->
                    <float name="hl.regex.slop">0.5</float>
                    <!-- a basic sentence pattern -->
                    <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
                </lst>
            </fragmenter>

            <!-- Configure the standard formatter -->
            <formatter name="html"
                       default="true"
                       class="solr.highlight.HtmlFormatter">
                <lst name="defaults">
                    <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                    <str name="hl.simple.post"><![CDATA[</em>]]></str>
                </lst>
            </formatter>

            <!-- Configure the standard encoder -->
            <encoder name="html"
                     class="solr.highlight.HtmlEncoder"/>

            <!-- Configure the standard fragListBuilder -->
            <fragListBuilder name="simple"
                             class="solr.highlight.SimpleFragListBuilder"/>

            <!-- Configure the single fragListBuilder -->
            <fragListBuilder name="single"
                             class="solr.highlight.SingleFragListBuilder"/>

            <!-- Configure the weighted fragListBuilder -->
            <fragListBuilder name="weighted"
                             default="true"
                             class="solr.highlight.WeightedFragListBuilder"/>

            <!-- default tag FragmentsBuilder -->
            <fragmentsBuilder name="default"
                              default="true"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <!--
                <lst name="defaults">
                  <str name="hl.multiValuedSeparatorChar">/</str>
                </lst>
                -->
            </fragmentsBuilder>

            <!-- multi-colored tag FragmentsBuilder -->
            <fragmentsBuilder name="colored"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <lst name="defaults">
                    <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
                    <str name="hl.tag.post"><![CDATA[</b>]]></str>
                </lst>
            </fragmentsBuilder>

            <boundaryScanner name="default"
                             default="true"
                             class="solr.highlight.SimpleBoundaryScanner">
                <lst name="defaults">
                    <str name="hl.bs.maxScan">10</str>
                    <str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
                </lst>
            </boundaryScanner>

            <boundaryScanner name="breakIterator"
                             class="solr.highlight.BreakIteratorBoundaryScanner">
                <lst name="defaults">
                    <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
                    <str name="hl.bs.type">WORD</str>
                    <!-- language and country are used when constructing Locale object.  -->
                    <!-- And the Locale object will be used when getting instance of BreakIterator -->
                    <str name="hl.bs.language">en</str>
                    <str name="hl.bs.country">US</str>
                </lst>
            </boundaryScanner>
        </highlighting>
    </searchComponent>

    <!-- Update Request Processors
         https://solr.apache.org/guide/solr/latest/configuration-guide/update-request-processors.html

         Chains or individual Update Request Processor Factories can be declared and referenced
         to preprocess documents sent to Update Request Handlers.
      -->

    <!-- Add unknown fields to the schema

         Field type guessing update request processors that will
         attempt to parse string-typed field values as Booleans, Longs,
         Doubles, or Dates, and then add schema fields with the guessed
         field types Text content will be indexed as "text_general" as
         well as a copy to a plain string version in *_str.
         See the updateRequestProcessorChain defined later for the order they are executed in.

         These require that the schema is both managed and mutable, by
         declaring schemaFactory as ManagedIndexSchemaFactory, with
         mutable specified as true.

         See https://solr.apache.org/guide/solr/latest/indexing-guide/schemaless-mode.html for further explanation.

      -->
    <updateProcessor class="solr.UUIDUpdateProcessorFactory" name="uuid"/>
    <updateProcessor class="solr.RemoveBlankFieldUpdateProcessorFactory" name="remove-blank"/>
    <updateProcessor class="solr.FieldNameMutatingUpdateProcessorFactory" name="field-name-mutating">
        <str name="pattern">[^\w-\.]</str>
        <str name="replacement">_</str>
    </updateProcessor>
    <!--    <updateProcessor class="solr.NumFieldLimitingUpdateRequestProcessorFactory" name="max-fields">-->
    <!--        <int name="maxFields">1000</int>-->
    <!--        <bool name="warnOnly">true</bool>-->
    <!--    </updateProcessor>-->
    <updateProcessor class="solr.ParseBooleanFieldUpdateProcessorFactory" name="parse-boolean"/>
    <updateProcessor class="solr.ParseLongFieldUpdateProcessorFactory" name="parse-long"/>
    <updateProcessor class="solr.ParseDoubleFieldUpdateProcessorFactory" name="parse-double"/>
    <updateProcessor class="solr.ParseDateFieldUpdateProcessorFactory" name="parse-date">
        <arr name="format">
            <str>yyyy-MM-dd['T'[HH:mm[:ss[.SSS]][z</str>
            <str>yyyy-MM-dd['T'[HH:mm[:ss[,SSS]][z</str>
            <str>yyyy-MM-dd HH:mm[:ss[.SSS]][z</str>
            <str>yyyy-MM-dd HH:mm[:ss[,SSS]][z</str>
            <str>[EEE, ]dd MMM yyyy HH:mm[:ss] z</str>
            <str>EEEE, dd-MMM-yy HH:mm:ss z</str>
            <str>EEE MMM ppd HH:mm:ss [z ]yyyy</str>
        </arr>
    </updateProcessor>
    <updateProcessor class="solr.AddSchemaFieldsUpdateProcessorFactory" name="add-schema-fields">
        <lst name="typeMapping">
            <str name="valueClass">java.lang.String</str>
            <str name="fieldType">text_general</str>
            <lst name="copyField">
                <str name="dest">*_str</str>
                <int name="maxChars">256</int>
            </lst>
            <!-- Use as default mapping instead of defaultFieldType -->
            <bool name="default">true</bool>
        </lst>
        <lst name="typeMapping">
            <str name="valueClass">java.lang.Boolean</str>
            <str name="fieldType">booleans</str>
        </lst>
        <lst name="typeMapping">
            <str name="valueClass">java.util.Date</str>
            <str name="fieldType">pdates</str>
        </lst>
        <lst name="typeMapping">
            <str name="valueClass">java.lang.Long</str>
            <str name="valueClass">java.lang.Integer</str>
            <str name="fieldType">plongs</str>
        </lst>
        <lst name="typeMapping">
            <str name="valueClass">java.lang.Number</str>
            <str name="fieldType">pdoubles</str>
        </lst>
    </updateProcessor>


    <!-- The update.autoCreateFields property can be turned to false to disable schemaless mode -->
    <updateRequestProcessorChain name="add-unknown-fields-to-the-schema" default="${update.autoCreateFields:true}"
                                 processor="uuid,remove-blank,field-name-mutating,parse-boolean,parse-long,parse-double,parse-date,add-schema-fields">
        <!--                                 processor="uuid,remove-blank,field-name-mutating,max-fields,parse-boolean,parse-long,parse-double,parse-date,add-schema-fields">-->
        <processor class="solr.LogUpdateProcessorFactory"/>
        <processor class="solr.DistributedUpdateProcessorFactory"/>
        <processor class="solr.RunUpdateProcessorFactory"/>
    </updateRequestProcessorChain>

    <!-- Deduplication

         An example dedup update request processor chain that creates the "id" field
         on the fly based on the hash code of some other fields.  This
         example has overwriteDupes set to false since we are using the
         id field as the signatureField and Solr will maintain
         uniqueness based on that anyway.

      -->
    <!--
       <updateRequestProcessorChain name="dedupe">
         <processor class="solr.processor.SignatureUpdateProcessorFactory">
           <bool name="enabled">true</bool>
           <str name="signatureField">id</str>
           <str name="fields">name,features,cat</str>
           <str name="signatureClass">solr.processor.Lookup3Signature</str>
         </processor>
         <processor class="solr.LogUpdateProcessorFactory" />
         <processor class="solr.RunUpdateProcessorFactory" />
       </updateRequestProcessorChain>
      -->

    <!-- Response Writers

         https://solr.apache.org/guide/solr/latest/query-guide/response-writers.html

         Request responses will be written using the writer specified by
         the 'wt' request parameter matching the name of a registered
         writer.

         The "default" writer is the default and will be used if 'wt' is
         not specified in the request.
      -->
    <!-- The following response writers are implicitly configured unless
         overridden...
      -->
    <!--
       <queryResponseWriter name="xml"
                            default="true"
                            class="solr.XMLResponseWriter" />
       <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
       <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
       <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
       <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
       <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
       <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
       <queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
      -->

    <!-- Overriding the content-type of the response writer.
         For example, Default content-type of JSON is application/json. This can be overridden to
         text/plain so that response is easy to read in *any* browser.
     -->
    <!--
       <queryResponseWriter name="json" class="solr.JSONResponseWriter">
          <str name="content-type">text/plain; charset=UTF-8</str>
        </queryResponseWriter>
     -->

    <!-- Query Parsers

         https://solr.apache.org/guide/solr/latest/query-guide/query-syntax-and-parsers.html

         Multiple QParserPlugins can be registered by name, and then
         used in either the "defType" param for the QueryComponent (used
         by SearchHandler) or in LocalParams
      -->
    <!-- example of registering a query parser -->
    <!--
       <queryParser name="myparser" class="com.mycompany.MyQParserPlugin"/>
      -->

    <!-- Function Parsers

         https://solr.apache.org/guide/solr/latest/query-guide/function-queries.html

         Multiple ValueSourceParsers can be registered by name, and then
         used as function names when using the "func" QParser.
      -->
    <!-- example of registering a custom function parser  -->
    <!--
       <valueSourceParser name="myfunc"
                          class="com.mycompany.MyValueSourceParser" />
      -->


    <!-- Document Transformers
         https://solr.apache.org/guide/solr/latest/query-guide/document-transformers.html
      -->
    <!--
       Could be something like:
       <transformer name="db" class="com.mycompany.LoadFromDatabaseTransformer" >
         <int name="connection">jdbc://....</int>
       </transformer>

       To add a constant value to all docs, use:
       <transformer name="mytrans2" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
         <int name="value">5</int>
       </transformer>

       If you want the user to still be able to change it with _value:something_ use this:
       <transformer name="mytrans3" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
         <double name="defaultValue">5</double>
       </transformer>

        If you are using the QueryElevationComponent, you may wish to mark documents that get boosted.  The
        EditorialMarkerFactory will do exactly that:
       <transformer name="qecBooster" class="org.apache.solr.response.transform.EditorialMarkerFactory" />
      -->
</config>
