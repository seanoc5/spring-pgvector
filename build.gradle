plugins {
	id 'groovy'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'application'
}

group = 'com.oconeco'
version = '0.2.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springAiVersion', "1.0.0-M6")
	set('testcontainersVersion', "1.19.7")
	set('spockVersion', "2.4-M1-groovy-4.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.apache.groovy:groovy-all:4.0.24'

	implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
	implementation 'org.springframework.ai:spring-ai-pgvector-store-spring-boot-starter'
	implementation 'org.springframework.session:spring-session-core'
    implementation 'io.github.wimdeblauwe:htmx-spring-boot:4.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // https://mvnrepository.com/artifact/org.apache.opennlp/opennlp-tools
    implementation 'org.apache.opennlp:opennlp-tools:2.5.3'
    // add a test http client
//    implementation 'org.apache.httpcomponents:httpcomponents-client:4.5.14'
//    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.2'

    // Apache Commons CSV for parsing CSV files
    implementation 'org.apache.commons:commons-csv:1.13.0'

    // Apache POI for Excel file processing
    implementation 'org.apache.poi:poi:5.2.5'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'

    // https://mvnrepository.com/artifact/org.apache.solr/solr-solrj
    implementation 'org.apache.solr:solr-solrj:9.8.1'
    // Add Apache HttpClient dependencies required by HttpSolrClient
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.apache.httpcomponents:httpcore:4.4.16'
    implementation 'org.apache.httpcomponents:httpmime:4.5.14'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	developmentOnly 'org.springframework.ai:spring-ai-spring-boot-docker-compose'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    runtimeOnly 'org.postgresql:postgresql'

//    testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Spock Framework
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"

    // TestContainers
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:spock:${testcontainersVersion}"

    // For testing with Docker Compose
    testImplementation 'org.springframework.boot:spring-boot-docker-compose'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Task to run the NAICS Excel importer
task runNaicsExcelImporter(type: JavaExec) {
    description = 'Run the NAICS Excel importer'
    group = 'application'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.oconeco.spring_pgvector.SpringPgvectorApplication'

    // Set the profile and file path
    def resourcesDir = "${projectDir}/src/main/resources"
//    def excelFile = new File(resourcesDir, '2022-NAICS-Codes-listed-numerically-2-Digit-through-6-Digit.xlsx')
    def excelFile = new File(resourcesDir, 'NAICS-test.xlsx')

    args = ['--spring.profiles.active=naics-excel-import', "--file=${excelFile.absolutePath}"]
}

/*
// Task to run the CSV importer
task runCsvImporter(type: JavaExec) {
    description = 'Run the SAM.gov CSV importer'
    group = 'application'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'test.RunCsvImporter'
}

// Define the main application class
application {
    mainClass = 'com.oconeco.SamGovApplication'
}

// Task to run the main Spring Boot application
task runMainApp(type: JavaExec) {
    description = 'Run the main Spring Boot application'
    group = 'application'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.oconeco.SamGovApplication'
}

// Task to run the CSV importer with Spring Boot
task runCsvImporterApp(type: JavaExec) {
    description = 'Run the Spring Boot CSV importer application'
    group = 'application'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.oconeco.SamGovApplication'
    args = ['--spring.profiles.active=csv-import']
}

// Task to run the CSV importer with a specific file
task runCsvImporterWithFile(type: JavaExec) {
    description = 'Run the Spring Boot CSV importer with a specific file'
    group = 'application'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.oconeco.SamGovApplication'

    // Default arguments, can be overridden from command line with -Pargs="..."
    args = ['--spring.profiles.active=csv-import', '--file=' + project.findProperty('csvFile')]

    // Only run if csvFile property is provided
    onlyIf {
        project.hasProperty('csvFile')
    }
}

// Task to run the search functionality
task runSearch(type: JavaExec) {
    description = 'Run the Spring Boot search functionality'
    group = 'application'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.oconeco.SamGovApplication'

    // Default arguments, can be overridden from command line with -Pargs="..."
    args = ['--spring.profiles.active=csv-import', '--search=' + (project.findProperty('query') ?: 'software development')]
}
*/
